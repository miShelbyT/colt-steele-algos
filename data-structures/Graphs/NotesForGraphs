What is a graph??
data stored as a bunch of nodes with connections between those nodes - real world examples are: 
maps (locations that link to other locations along roads, paths, etc), 
social media network connections, 
networks of webpages that link to other webpages (like Wikipedia),
AI recommendations on websites/apps
SO MUCH MORE

Vertex is a node
Edge is a connection between two nodes

linked lists and trees are technically types of graphs because they have nodes with connections!
however, with a tree, there is only one possible path from one node to another. 
with a generic graph there may be more than one path

undirected graph: unlike a singly linked list, there is no distinct direction from one node to another
the relationship goes both ways

directed graph is like a bunch of one way roads between the vertices. 
or like instagram or twitter where users follow a celebrity and the celebrity may not follow them back

weighted vs unweighted graph: when we assign value to the edges the UNweighted graph becomes a weighted graph


how do you traverse a graph when there is no distinct entrypoint? we just to specify our start point in the algorithm
-- we need to visit/update/check each node/vertex (at least for starters)

BFS - we traverse all neighbors before we traverse the neighbors' neighbors. distance between nodes is "height"
if nodes are adjacent we say they have a height of 1. if there is a node between two nodes they have a height of 2

Dijkstra's algorithm: shortest path algorithm for traversing a weighted graph

// as per image in screenshot in this file:
//start our object with shortest distance from "A" to each node initialized for each value:
const shortestDistance = {
  A: 0,
  B: Infinity, // 4 is less than infinity so we change it to 4
  C: Infinity, // 2 is less than infinity so we change it to 2
  D: Infinity, // becomes 4 (A to C is 2, C to D is 2)
  E: Infinity, // becomes 7 (A to B is 4, B to E is 3)
  F: Infinity, // becomes 6 (A to C is 2, C to F is 4)// updates to 5 (A to C is 2, C to D is 2, D to F is 1)
}

Shortest Path From A to E
//start with shortest value first and set it into visited array, then check the distance between A and its neighbors
//then once that is done we start the process again, picking the neighbor with the shortest distance between them

const visited = [A,C,B,D]

// set object (to show us the shortest path)

const previous = { 
  A: null,
  B: null, // change from null to A
  C: null, // change from null to A
  D: null, // change from null to C
  E: null, // change from null to B
  F: null, // change from null to C // changes to D
}
